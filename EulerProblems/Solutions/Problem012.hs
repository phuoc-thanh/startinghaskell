{-# OPTIONS_GHC -Wall #-}
module Problem012 where

import Problem003

-- The sequence of triangle numbers is generated by adding the natural numbers.
-- So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

-- 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

-- Let us list the factors of the first seven triangle numbers:

--  1: 1
--  3: 1,3
--  6: 1,2,3,6
-- 10: 1,2,5,10
-- 15: 1,3,5,15
-- 21: 1,3,7,21
-- 28: 1,2,4,7,14,28
-- We can see that 28 is the first triangle number to have over five divisors.

-- What is the value of the first triangle number to have over five hundred divisors?


divisors :: Integer -> [Integer]
divisors n = 1 : filter (\x -> mod n x == 0) [2 .. n]

-- Divisors Count can calculate from prime factors, see links at the end of file.
divisorsCount :: Int -> Int
divisorsCount n = product $ primesCount $ primeFactors n
primesCount [] = []
primesCount (x:xs) = ((length $ filter (==x) $ x:xs) + 1) : primesCount (filter (/=x) (x:xs))

listOfTriangle :: Int -> [Int]
listOfTriangle 0 = [0]
listOfTriangle 1 = [1]
listOfTriangle n = n*(n+1) `div` 2 : listOfTriangle (n - 1)

p12triangle :: [Int]
p12triangle = filter (\x -> divisorsCount x > 500) (reverse $ listOfTriangle 20000)

--https://stackoverflow.com/questions/110344/algorithm-to-calculate-the-number-of-divisors-of-a-given-number
--https://en.wikipedia.org/wiki/Triangular_number